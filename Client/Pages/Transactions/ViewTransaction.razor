@*@page "/transactions/{TransactionID:int}/view"
@using MoneyManager.Models.Domain
@using MoneyManager.Client.Services.Interfaces
@inject ITransactionService _transactionService
@inject AppState _appState


<h3>Transaction <b>@transaction?.Description</b></h3>

<EditForm Model="@transaction" class="ui form" Context="formContext">

    <h4 class="ui dividing header">General information</h4>

    <div class="field">
        <label>Description</label>
        <InputText @bind-Value="transaction.Description"
                   type="text"
                   name="description"
                   placeholder="Description" />
    </div>
    <div class="field">
        <label>Date</label>
        <InputDate @bind-Value="transaction.Date"
                   type="date"
                   name="date"
                   placeholder="Date" />
    </div>

    <h4 class="ui dividing header">Transaction details</h4>
    <div class="ui three column grid compact">
        <div class="row">
            <div class="column field">
                <label>From account</label>
            </div>
            <div class="column field">
                <label>To account</label>
            </div>
            <div class="column field">
                <label>Amount account</label>
            </div>
        </div>
        @for (int i = 0; i < transaction.TransactionDetails.Count; i++)
        {
            var detail = transaction.TransactionDetails[i];

            <div class="row">
                <div class="column">
                    <FomanticDropdown PlaceholderText="text"
                                      TItem="Account"
                                      SearchFunction=SuggestFromAccount
                                      @bind-SelectedItem=detail.FromAccount>
                        <SelectedItemTemplate>
                            @context.Name
                        </SelectedItemTemplate>
                    </FomanticDropdown>
                </div>


                <div class="column">
                    <FomanticDropdown PlaceholderText="text"
                                      TItem="Account"
                                      SearchFunction=SuggestFromAccount
                                      @bind-SelectedItem=detail.ToAccount>
                        <SelectedItemTemplate>
                            @context.Name
                        </SelectedItemTemplate>
                    </FomanticDropdown>
                </div>

                <div class="column">
                    <div class="field">
                        <InputNumber @bind-Value="detail.Amount"
                                     placeholder="Amount" />
                    </div>
                </div>
            </div>
        }
        <div class="row">

            <DDButton Type="submit" Emphasis="primary">Save</DDButton>
            <DDButton OnClick="AddRow">Add row</DDButton>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public int TransactionID { get; set; }

    private bool isReadonly = true;

    private Transaction transaction = new Transaction();

    private Account SelectedFromAccount;

    private List<Account> givenItems = new List<Account> { new Account { Name = "foo" }, new Account { Name = "bar" } };

    private List<Account> accounts;

    protected override async Task OnInitializedAsync()
    {
        if (_appState.Transactions == null)
        {
            _appState.Transactions = await _transactionService.GetAllTransactionsAsync();
        }
        transaction = _appState.Transactions.First(t => t.ID == TransactionID);
        //accounts = _appState.Accounts;
    }

    protected void AddRow()
    {
        transaction.TransactionDetails.Add(new TransactionDetails());
    }

    protected async Task<IEnumerable<Account>> SuggestFromAccount(string? searchText)
    {
        if (string.IsNullOrEmpty(searchText))
        {
            return givenItems;
        }
        return givenItems.Where(i => i.Name.Contains(searchText));
    }

}*@
